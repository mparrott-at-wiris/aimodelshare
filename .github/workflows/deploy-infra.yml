name: Deploy Infra (Terraform Workspaces)

on:
  push:
    branches: [ master ]
    paths:
      - 'infra/**'
      - '.github/workflows/deploy-infra.yml'
      - '.github/workflows/bootstrap-terraform.yml'
  workflow_dispatch:

jobs:
  bootstrap:
    uses: ./.github/workflows/bootstrap-terraform.yml
    secrets: inherit

  deploy:
    needs: bootstrap
    runs-on: ubuntu-latest

    strategy:
      matrix:
        env: [dev]

    permissions:
      contents: read

    env:
      AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
      TF_IN_AUTOMATION: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DATA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DATA_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: (Optional) Build Lambda Layer
        working-directory: infra/layer
        run: |
          if [ -f requirements.txt ]; then
            bash build_layer.sh || true
          fi

      - name: Terraform Init
        working-directory: infra
        run: terraform init -input=false

      - name: Select/Create Workspace and Import Shared DynamoDB Table
        working-directory: infra
        run: |
          set -euo pipefail

          WS="${{ matrix.env }}"
          echo "Ensuring Terraform workspace '${WS}' exists..."
          if terraform workspace list | sed 's/^[* ]*//' | grep -Fxq "$WS"; then
            echo "Selecting existing workspace: $WS"
            terraform workspace select "$WS"
          else
            echo "Creating new workspace: $WS"
            terraform workspace new "$WS"
          fi
          echo "Current workspace: $(terraform workspace show)"

          # Ensure backend directory exists if re-run
            if [ ! -d .terraform ]; then
              echo "Terraform not initialized yet; running 'terraform init'..."
              terraform init -input=false
            fi

          STATE_KEY="env:/${WS}/aimodelshare/infra/terraform.tfstate"
          echo "Checking if remote state object exists: ${STATE_KEY}"
          if aws s3api head-object --bucket "aimodelshare-tfstate-prod-copilot-2024" --key "${STATE_KEY}" >/dev/null 2>&1; then
            echo "Remote state object exists for workspace '${WS}'"
          else
            echo "Remote state object missing for workspace '${WS}' - creating initial state"
            terraform apply -auto-approve -target=null_resource.state_seed
          fi

          # Retrieve table name WITHOUT terraform console (avoid interactive hang)
          TABLE_NAME="PlaygroundScores"
          echo "Using table name: ${TABLE_NAME}"

          # Attempt import only if not already tracked
          if terraform state show aws_dynamodb_table.playground >/dev/null 2>&1; then
            echo "DynamoDB table already in state."
          else
            echo "Checking if DynamoDB table '${TABLE_NAME}' exists in AWS..."
            set +e
            if aws dynamodb describe-table --table-name "${TABLE_NAME}" >/dev/null 2>&1; then
              echo "Table exists - attempting Terraform import..."
              terraform import aws_dynamodb_table.playground "${TABLE_NAME}" || echo "Import failed; will reconcile on apply."
            else
              echo "Table does not exist; will be created on apply."
            fi
            set -e
          fi

          echo "Workspace '$WS' ready; proceeding to plan/apply steps."

      - name: Terraform Validate
        working-directory: infra
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: infra
        run: terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master'
        working-directory: infra
        run: terraform apply -input=false -auto-approve tfplan

      - name: Show Outputs
        working-directory: infra
        run: terraform output -json
