name: Deploy Infra (Terraform, OIDC, Workspaces)

on:
  push:
    branches: [ master ]
    paths:
      - 'infra/**'
      - '.github/workflows/deploy-infra.yml'
      - '.github/workflows/bootstrap-terraform.yml'
  workflow_dispatch:

jobs:
  bootstrap:
    uses: ./.github/workflows/bootstrap-terraform.yml
    secrets: inherit

  deploy:
    needs: bootstrap
    runs-on: ubuntu-latest

    strategy:
      matrix:
        env: [dev, stage, prod]

    permissions:
      contents: read

    env:
      AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
      TF_IN_AUTOMATION: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      # Configure AWS credentials using access keys per company policy
      # Note: Requires AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY repository secrets
      # Security: Ensure access keys follow principle of least privilege and key rotation policies
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DATA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DATA_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: (Optional) Build Lambda Layer
        working-directory: infra/layer
        run: |
          if [ -f requirements.txt ]; then
            bash build_layer.sh || true
          fi

      - name: Terraform Init
        working-directory: infra
        run: terraform init -input=false

      - name: Select/Create Workspace and Import Shared DynamoDB Table
        working-directory: infra
        run: |
          set -euo pipefail

          WS="${{ matrix.env }}"
          echo "Ensuring Terraform workspace '${WS}' exists..."

          # Normalize workspace names from 'terraform workspace list'
          if terraform workspace list | sed 's/^[* ]*//' | grep -Fxq "$WS"; then
            echo "Selecting existing workspace: $WS"
            terraform workspace select "$WS"
          else
            echo "Creating new workspace: $WS"
            terraform workspace new "$WS"
          fi

          echo "Current workspace: $(terraform workspace show)"

          # Verify backend is initialized (in case this step runs before init in your workflow)
          if [ ! -d .terraform ]; then
            echo "Terraform not initialized yet; running 'terraform init'..."
            terraform init -input=false
          fi

          # Import shared DynamoDB table if not already in state.
          # This prevents 'ResourceInUseException' on apply for the shared table.
          if terraform state show aws_dynamodb_table.playground >/dev/null 2>&1; then
            echo "Shared DynamoDB table 'PlaygroundScores' already tracked in state for workspace '$WS'."
          else
            echo "Importing shared DynamoDB table 'PlaygroundScores' into state for workspace '$WS'..."
            terraform import aws_dynamodb_table.playground PlaygroundScores
          fi

          echo "Workspace '$WS' ready; proceeding to plan/apply steps."

      - name: Terraform Validate
        working-directory: infra
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: infra
        run: terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master'
        working-directory: infra
        run: terraform apply -input=false -auto-approve tfplan

      - name: Show Outputs
        working-directory: infra
        run: terraform output -json
